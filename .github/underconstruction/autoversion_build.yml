name: auto-verion build 

on: [push]
#https://github.com/WyriHaximus/github-action-get-previous-tag/blob/master/examples/scheduled-release.md

jobs:
  versioncheck:
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      fullversiontag: ${{ steps.getalltags.outputs.fullversiontag }}
      nextMajor: ${{ steps.getalltags.outputs.nextMajor }}
      nextMinor: ${{ steps.getalltags.outputs.nextMinor }}
      nextPatch: ${{ steps.getalltags.outputs.nextPatch }}
      nextversiontag: ${{ steps.selectversion.outputs.nextversiontag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get version data
        id: getalltags
        run: |
          # create all possible next versions
          echo "fullversiontag=$(git describe --tags)" >> $GITHUB_OUTPUT
          echo "nextMajor=$(git describe --tags | cut -d'_' -f1-3 | awk -F'_' '{print $1+1"_"$2-$2"_"$3-$3}')" >> $GITHUB_OUTPUT
          echo "nextMinor=$(git describe --tags | cut -d'_' -f1-3 | awk -F'_' '{print $1"_"$2+1"_"$3-$3}')" >> $GITHUB_OUTPUT
          echo "nextPatch=$(git describe --tags | cut -d'_' -f1-3 | awk -F'_' '{print $1"_"$2"_"$3+1}')" >> $GITHUB_OUTPUT

      - name: Version Test
        id: versiontester
        run: |
          echo ${{ steps.getalltags.outputs.fullversiontag }}
          echo ${{ steps.getalltags.outputs.nextMajor }}
          echo ${{ steps.getalltags.outputs.nextMinor }}
          echo ${{ steps.getalltags.outputs.nextPatch }}

      - name: when running on main branch check commit title
        id: selectversion
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "Running on main branch"
            echo "Checking commit title"
            echo "Commit title: ${{ github.event.head_commit.message }}"
            if [[ "${{ github.event.head_commit.message }}" == *"major"* ]]; then
              echo "major version bump"
              echo "nextversiontag=${{ steps.getalltags.outputs.nextMajor }}" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.head_commit.message }}" == *"minor"* ]]; then
              echo "minor version bump"
              echo "nextversiontag=${{ steps.getalltags.outputs.nextMinor }}" >> $GITHUB_OUTPUT
            else
              echo "No version bump specified"
              echo "nextversiontag=${{ steps.getalltags.outputs.nextPatch }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "Not running on main branch"
            echo "nextversiontag=${{ steps.getalltags.outputs.fullversiontag }}" >> $GITHUB_OUTPUT
          fi

  build:
    needs: versioncheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Version Test
        id: versiontester
        run: echo ${{ needs.versioncheck.outputs.nextversiontag }}

      #create a release with the tag
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.versioncheck.outputs.nextversiontag }}
          release_name: Release ${{ needs.versioncheck.outputs.nextversiontag }}
          draft: false
          prerelease: false

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio

      - name: Build Release
        run: pio run -e mumo_v2x_pcb
        #export PLATFORMIO_BUILD_FLAGS="'-DNEXT_VERSION=\"${{ needs.versioncheck.outputs.nextversiontag }}-MCU4M-PROD\"'"

      - name: Archive Production results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.versioncheck.outputs.nextversiontag }}.bin
          path: .pio/build/mumo_v2x_pcb/firmware.bin
          if-no-files-found: error

      #upload the artifacts to the release
      - name: Upload Release Asset Prod
        id: upload-release-asset-prod
        uses: actions/upload-release-asset@v1
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .pio/build/mumo_v2x_pcb/firmware.bin
          asset_name: ${{ needs.versioncheck.outputs.nextversiontag }}.bin
          asset_content_type: application/octet-stream