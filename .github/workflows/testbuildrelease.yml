name: Test, Build and Release
on:
  workflow_dispatch:
  push:
    branches: [main, develop]

jobs:
  versioning:
    name: Determine version, Test, Build and Release
    permissions: write-all

    runs-on: ubuntu-latest
    outputs:
      branchname: ${{ steps.versioninfo.outputs.branchname }}
      commithash: ${{ steps.versioninfo.outputs.commithash }}
      buildtimestamp: ${{ steps.versioninfo.outputs.buildtimestamp }}
      currentmajornmbr: ${{ steps.versioninfo.outputs.currentmajornmbr }}
      currentminornmbr: ${{ steps.versioninfo.outputs.currentminornmbr }}
      currentpatchnmbr: ${{ steps.versioninfo.outputs.currentpatchnmbr }}
      nextmajornmbr: ${{ steps.versioninfo.outputs.nextmajornmbr }}
      nextminornmbr: ${{ steps.versioninfo.outputs.nextminornmbr }}
      nextpatchnmbr: ${{ steps.versioninfo.outputs.nextpatchnmbr }}
      currentversion: ${{ steps.versioninfo.outputs.currentversion }}
      nextmajorversion: ${{ steps.versioninfo.outputs.nextmajorversion }}
      nextminorversion: ${{ steps.versioninfo.outputs.nextminorversion }}
      nextpatchversion: ${{ steps.versioninfo.outputs.nextpatchversion }}
      nextdevelopversion: ${{ steps.versioninfo.outputs.nextdevelopversion }}
      buildversion: ${{ steps.selectversion.outputs.buildversion }}
      buildversionfilename: ${{ steps.selectversion.outputs.buildversionfilename }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Enable caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
              
      - name: Get version data
        id: versioninfo
        run: |
          echo "extract branch name from github_ref '${{ github.ref }}'"
          declare branchname=$(echo "${{ github.ref }}" | cut -d'/' -f3)
          echo "clean branch name = $branchname"
          echo "extract commit short hash : $(git rev-parse --short HEAD)"
          declare commithash=$(git rev-parse --short HEAD)
          echo "extract build timestamp"
          declare buildtimestamp=$(date "+%Y-%b-%d-%H:%M:%S")
          echo "buildtimestamp = $buildtimestamp"
          declare fulltag=$(git describe --tag $(git rev-parse --verify refs/remotes/origin/main))
          echo "fulltag = $fulltag"
          declare versiontag=$(echo $fulltag | cut -d'-' -f1)
          echo "extract SemVer numbers from version tag $versiontag"
          declare -i currentmajornmbr=$(echo $versiontag | cut -c 2- | cut -d'.' -f1)
          declare -i nextmajornmbr=$currentmajornmbr+1
          echo "currentmajornmbr = $currentmajornmbr, nextmajornmbr = $nextmajornmbr"
          declare -i currentminornmbr=$(echo $versiontag | cut -c 2- | cut -d'.' -f2)
          declare -i nextminornmbr=$currentminornmbr+1
          echo "currentminornmbr = $currentminornmbr, nextminornmbr = $nextminornmbr"
          declare -i currentpatchnmbr=$(echo $versiontag | cut -c 2- | cut -d'.' -f3)
          declare -i nextpatchnmbr=$currentpatchnmbr+1
          echo "currentpatchnmbr = $currentpatchnmbr, nextpatchnmbr = $nextpatchnmbr"
          echo "assemble complete version strings, for current and possible next versions"
          declare currentversion="v$currentmajornmbr.$currentminornmbr.$currentpatchnmbr"
          declare nextmajorversion="v$nextmajornmbr.$currentminornmbr.$currentpatchnmbr"
          declare nextminorversion="v$currentmajornmbr.$nextminornmbr.$currentpatchnmbr"
          declare nextpatchversion="v$currentmajornmbr.$currentminornmbr.$nextpatchnmbr"
          declare nextdevelopversion="v$currentmajornmbr.$currentminornmbr.$currentpatchnmbr-$commithash"
          echo "output to GitHub Actions output variables"
          echo "branchname=$branchname" >> $GITHUB_OUTPUT
          echo "commithash=$commithash" >> $GITHUB_OUTPUT
          echo "buildtimestamp=$buildtimestamp" >> $GITHUB_OUTPUT
          echo "currentversion=$currentversion" >> $GITHUB_OUTPUT
          echo "nextmajorversion=$nextmajorversion" >> $GITHUB_OUTPUT
          echo "nextminorversion=$nextminorversion" >> $GITHUB_OUTPUT
          echo "nextpatchversion=$nextpatchversion" >> $GITHUB_OUTPUT
          echo "nextdevelopversion=$nextdevelopversion" >> $GITHUB_OUTPUT

      - name: Determine which version to build
        id: selectversion
        run: |
          echo "Triggered from Branch : ${{ steps.versioninfo.outputs.branchname }}"
          echo "Commit hash           : ${{ steps.versioninfo.outputs.commithash }}"
          echo "Current version       : ${{ steps.versioninfo.outputs.currentversion }}"
          echo "Possible versions :"
          echo "  Next major version   : ${{ steps.versioninfo.outputs.nextmajorversion }}"
          echo "  Next minor version   : ${{ steps.versioninfo.outputs.nextminorversion }}"
          echo "  Next patch version   : ${{ steps.versioninfo.outputs.nextpatchversion }}"
          echo "  Next develop version : ${{ steps.versioninfo.outputs.nextdevelopversion }}"
          if [ "${{ steps.versioninfo.outputs.branchname }}" == "main" ]; then
            echo "Triggered from merge on main branch with commit title : ${{ github.event.head_commit.message }}"
            if [[ "${{ github.event.head_commit.message }}" == *"major"* ]]; then
              declare buildversion="${{ steps.versioninfo.outputs.nextmajorversion }}"
              declare buildversionfilename=$(echo "${buildversion//./_}")
              echo "buildversion=$buildversion" >> $GITHUB_OUTPUT
              echo "buildversionfilename=$buildversionfilename" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.head_commit.message }}" == *"minor"* ]]; then
              declare buildversion="${{ steps.versioninfo.outputs.nextminorversion }}"
              declare buildversionfilename=$(echo "${buildversion//./_}")
              echo "buildversion=$buildversion" >> $GITHUB_OUTPUT
              echo "buildversionfilename=$buildversionfilename" >> $GITHUB_OUTPUT
            else
              declare buildversion="${{ steps.versioninfo.outputs.nextpatchversion }}"
              declare buildversionfilename=$(echo "${buildversion//./_}")
              echo "buildversion=$buildversion" >> $GITHUB_OUTPUT
              echo "buildversionfilename=$buildversionfilename" >> $GITHUB_OUTPUT
            fi
          else
            declare buildversion="${{ steps.versioninfo.outputs.nextdevelopversion }}"
            declare buildversionfilename=$(echo "${buildversion//./_}")
            echo "buildversion=$buildversion" >> $GITHUB_OUTPUT
            echo "buildversionfilename=$buildversionfilename" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
  
      - name: Run all generic unit tests
        run: |
          export PLATFORMIO_BUILD_FLAGS="'-DBUILD_VERSION=\"${{ steps.versioninfo.outputs.buildversion }}\" -DBUILD_TIMESTAMP=\"${{ steps.versioninfo.outputs.buildtimestamp }}\"'"
          pio test -e all_generic_unittests

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          gcov: true
          gcov_include: '.pio/build/all_generic_unittests/*'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Build
        run: |
          export PLATFORMIO_BUILD_FLAGS="'-DBUILD_VERSION=\"${{ steps.versioninfo.outputs.buildversion }}\" -DBUILD_TIMESTAMP=\"${{ steps.versioninfo.outputs.buildtimestamp }}\"'"
          pio run -e production

      - name: Attach Binary to Workflow run
        id: attachbinarytoworkflowrun
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.selectversion.outputs.buildversionfilename }}.bin
          path: .pio/build/production/firmware.bin
          if-no-files-found: error

      - name: Release when on main branch
        id: createrelease
        uses: actions/create-release@v1
        if: ${{ steps.versioninfo.outputs.branchname == 'main'}} 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.selectversion.outputs.buildversion }}
          release_name: Release ${{ steps.selectversion.outputs.buildversion }}
          draft: false
          prerelease: false

      - name: Attach Binary to Release
        id: attachbinarytorelease
        uses: actions/upload-release-asset@v1
        if: ${{ steps.versioninfo.outputs.branchname == 'main'}} 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.createrelease.outputs.upload_url }}
          asset_path: .pio/build/production/firmware.bin
          asset_name: ${{ steps.selectversion.outputs.buildversionfilename }}.bin
          asset_content_type: application/octet-stream